pub fn run() {
    let input = split_input(include_str!("puzzle_inputs/day8.txt"));
    println!("Solution day8_part1: {}", solve_part1(input.clone()));
    println!("Solution day8_part2: {}", solve_part2(input.clone()));
}

fn solve_part1(input: Vec<Vec<usize>>) -> usize {
    let mut visible = 0;
    for (i, line) in input.clone().into_iter().enumerate() {
        'outer: for (j, number) in line.clone().into_iter().enumerate() {
            if i == 0 || j == 0 || i == line.len() - 1 || j == input[0].len() - 1 {
                visible += 1;
                continue;
            }
            // check top trees
            let mut is_visible = true;
            for pos in 0..i {
                if input[pos][j] >= number {
                    is_visible = false;
                }
            }
            if is_visible {
                visible += 1;
                continue 'outer;
            };
            // check bottom trees
            is_visible = true;
            for pos in i + 1..input.len() {
                if input[pos][j] >= number {
                    is_visible = false;
                }
            }
            if is_visible {
                visible += 1;
                continue 'outer;
            };
            // check left trees
            is_visible = true;
            for pos in 0..j {
                if input[i][pos] >= number {
                    is_visible = false;
                }
            }

            if is_visible {
                visible += 1;
                continue 'outer;
            };
            // check right trees
            is_visible = true;
            for pos in j + 1..input[0].len() {
                if input[i][pos] >= number {
                    is_visible = false;
                }
            }
            if is_visible {
                visible += 1;
                continue 'outer;
            };
        }
    }

    visible
}

fn solve_part2(mut input: Vec<Vec<usize>>) -> usize {
    let mut highest_score = 0;

    for (i, line) in input.clone().into_iter().enumerate() {
        'outer: for (j, number) in line.clone().into_iter().enumerate() {
            let mut visible_top = 0;
            // check top trees
            if i > 0 {
                for pos in (0..i).rev() {
                    visible_top += 1;
                    if input[pos][j] >= number {
                        break;
                    }
                }
            }

            // check bottom trees
            let mut visible_bot = 0;
            for pos in i + 1..input.len() {
                visible_bot += 1;
                if input[pos][j] >= number {
                    break;
                }
            }
            // check left trees
            let mut visible_left = 0;
            if j > 0 {
                for pos in (0..j).rev() {
                    visible_left += 1;
                    if pos == 0 {
                        break;
                    }
                    if input[i][pos] >= number {
                        break;
                    }
                }
            }

            // check right trees
            let mut visible_right = 0;
            for pos in j + 1..input[0].len() {
                visible_right += 1;
                if input[i][pos] >= number {
                    break;
                }
            }
            let score = visible_bot * visible_left * visible_right * visible_top;

            if score > highest_score {
                highest_score = score;
            }
        }
    }
    highest_score
}

fn split_input(input: &str) -> Vec<Vec<usize>> {
    return input
        .split("\n")
        .filter(|l| !l.is_empty())
        .map(|x| {
            x.chars()
                .map(|c| c.to_digit(10).unwrap() as usize)
                .collect()
        })
        .collect();
}

mod tests {
    use crate::day8::*;
    const TEST_INPUT: &str = "30373
25512
65332
33549
35390";

    #[test]
    fn day1_part1() {
        let input = split_input(TEST_INPUT);
        assert_eq!(solve_part1(input), 21);
    }

    #[test]
    fn day1_part2() {
        let input = split_input(TEST_INPUT);
        assert_eq!(solve_part2(input), 8);
    }
}
